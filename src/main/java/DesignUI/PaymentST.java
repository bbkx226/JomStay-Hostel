/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package DesignUI;

import Models.Application;
import Models.Payment;
import Models.Room;
import Models.Student;
import Utils.PaymentHandling;
import Utils.PopUpWindow;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Objects;
import javax.swing.AbstractCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.*;

/**
 *
 * @author KZ
 */
public class PaymentST extends javax.swing.JPanel {

    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy/MM/dd");

    private static double selectedAmt = 0;
    private static ArrayList<Integer> selectedMonths = new ArrayList<>();
    private static ArrayList<Payment> payments;
    private static Application application;
    private static LocalDate startDate;
    
    /**
     * Creates new form PaymentST
     */
    public PaymentST() {
        initData();
        initComponents();
    }
    
    private static void initData() {
        payments = PaymentHandling.getCurrentStudentPayments(HostelST.getCurrentUser());
        application = payments.get(0).getApplication();
        startDate = application.getLocalStartDate().toLocalDate();
    }
    
    private class CheckboxCellRenderer extends JCheckBox implements TableCellRenderer {
        private final int disabledColumn;
        private final String disabledString;
        
        CheckboxCellRenderer(int disabledColumn, String disabledString) {
            this.disabledColumn = disabledColumn;
            this.disabledString = disabledString;
            setHorizontalAlignment(JCheckBox.CENTER);
        }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            boolean isEnabled = !table.getValueAt(row, disabledColumn).toString().equals(disabledString);
            setSelected((Boolean) value);
            setEnabled(isEnabled);
            return this;
        }
    }
    
    private class CheckboxCellEditor extends AbstractCellEditor implements TableCellEditor {
        private final int disabledColumn;
        private final String disabledString;
        private final JCheckBox checkBox;
        
        CheckboxCellEditor(int disabledColumn, String disabledString) {
            this.disabledColumn = disabledColumn;
            this.disabledString = disabledString;
            
            checkBox = new JCheckBox();
            checkBox.setHorizontalAlignment(JCheckBox.CENTER);
            checkBox.addItemListener((ItemEvent e) -> {
                fireEditingStopped();
            });
        }
        @Override
        public Object getCellEditorValue() {
            return checkBox.isSelected();
        }
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            boolean isEnabled = !table.getValueAt(row, disabledColumn).toString().equals(disabledString);
            checkBox.setSelected((Boolean) value);
            checkBox.setEnabled(isEnabled);
            return checkBox;
        }
    }
    
    private class PaymentStatusColorCellRenderer extends DefaultTableCellRenderer {
        private final int column;

        public PaymentStatusColorCellRenderer(int column) {
            this.column = column;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (column == this.column && value instanceof String) {
                String text = (String) value;
                if (text.contains("Paid")) {
                    component.setForeground(Color.GREEN);
                } else if (text.contains("Pending")) {
                    component.setForeground(Color.BLUE);
                } else {
                    component.setForeground(Color.RED);
                }
            }
            return component;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        resetBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        rentMonthsLabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        rentalPeriodLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        selectedAmtLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        payBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                showComponents(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Payment");

        resetBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        resetBtn.setText("Reset");
        resetBtn.setToolTipText("");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        paymentTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        paymentTable.setForeground(new java.awt.Color(0, 0, 0));
        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "Month", "Rent Period", "Amount", "Due Date", "Status", "Method", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(paymentTable);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setLayout(new java.awt.GridLayout(3, 2, 0, 30));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("    Rental Months");
        jPanel2.add(jLabel13);

        rentMonthsLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        rentMonthsLabel.setForeground(new java.awt.Color(255, 255, 255));
        rentMonthsLabel.setText("" + selectedMonths.size());
        jPanel2.add(rentMonthsLabel);

        jLabel14.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("    Rental Period");
        jPanel2.add(jLabel14);

        rentalPeriodLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        rentalPeriodLabel.setForeground(new java.awt.Color(255, 255, 255));
        rentalPeriodLabel.setText("N/A");
        jPanel2.add(rentalPeriodLabel);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("    Total Amount");
        jPanel2.add(jLabel12);

        selectedAmtLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        selectedAmtLabel.setForeground(new java.awt.Color(255, 255, 255));
        selectedAmtLabel.setText("RM" + selectedAmt);
        jPanel2.add(selectedAmtLabel);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Choose the rent months from the table provided, but avoid rapid checkbox clicks to avoid data errors.");

        payBtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        payBtn.setText("Pay Now");
        payBtn.setToolTipText("");
        payBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(resetBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(payBtn)
                        .addGap(427, 427, 427)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetBtn)
                    .addComponent(payBtn))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showDataInPanel() {
        selectedAmtLabel.setText("RM" + selectedAmt);
        rentMonthsLabel.setText("" + selectedMonths.size());
                
        Collections.sort(selectedMonths);
        if (selectedMonths.isEmpty()) {
            rentalPeriodLabel.setText("N/A");
        } else {
            String rentStart = (String) paymentTable.getValueAt(selectedMonths.get(0) - 1, 2);
            rentStart = rentStart.split(" ")[0];
            String rentEnd = (String) paymentTable.getValueAt(selectedMonths.get(selectedMonths.size() - 1) - 1, 2);
            rentEnd = rentEnd.split("~ ")[1];
            rentalPeriodLabel.setText("<html>" + rentStart + " ~ <br/>" + rentEnd + "<html/>");
        }
    }
    
    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        resetAll();
    }//GEN-LAST:event_resetBtnActionPerformed
    
    private void resetAll() {
        DefaultTableModel tableModel = (DefaultTableModel) paymentTable.getModel();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(false, i, 0);
        }
        selectedAmt = 0;
        selectedMonths.clear();
        showDataInPanel();
    }
    
    private void initTable() {
        DefaultTableModel tableModel = (DefaultTableModel) paymentTable.getModel();
        paymentTable.setRowSelectionAllowed(false);
        
        for (int i = 0; i < payments.size(); i++) {
            Payment payment = payments.get(i);
            LocalDate periodStart = startDate.plusMonths(i);
            LocalDate dueDate = periodStart.plusDays(7);
            LocalDate periodEnd = periodStart.plusMonths(1);
            Object [] row = {
                false,
                i + 1,
                periodStart.format(FORMATTER) + " ~ " + periodEnd.format(FORMATTER),
                payment.getAmount(),
                dueDate.toString(),
                payment.getPaymentStatus(),
                payment.getMethod().replace("_", " "),
                payment.getDate()
            };
            tableModel.addRow(row);
        }
        
        TableColumnModel columnModel = paymentTable.getColumnModel();
        columnModel.getColumn(0).setCellRenderer(new CheckboxCellRenderer(5, "Paid"));
        columnModel.getColumn(0).setCellEditor(new CheckboxCellEditor(5, "Paid"));
        columnModel.getColumn(5).setCellRenderer(new PaymentStatusColorCellRenderer(5));
        
        tableModel.addTableModelListener(event -> {
            int row = event.getFirstRow();
            String status = (String) paymentTable.getValueAt(row, 5);
            if (event.getColumn() == 0 && ! status.equals("Paid")) {
                boolean isSelected = (boolean) paymentTable.getValueAt(row, 0);
                if (isSelected) {
                    selectedAmt += (double) paymentTable.getValueAt(row, 3);
                    selectedMonths.add((Integer) paymentTable.getValueAt(row, 1));
                } else {
                    selectedAmt -= (double) paymentTable.getValueAt(row, 3);
                    selectedMonths.remove((Integer) paymentTable.getValueAt(row, 1));
                }
                showDataInPanel();
                System.out.println("Row: " + row + " selected: " + isSelected);
            }
        });
        
        TableColumn column = null;
        for (int i = 0; i < paymentTable.getColumnCount(); i++) {
            column = columnModel.getColumn(i);
            switch (i) {
                case 0 -> column.setMinWidth(40);
                case 1 -> column.setMinWidth(35);
                case 2 -> column.setMinWidth(145);
                case 6 -> column.setMinWidth(50);
                default -> column.setMinWidth(60);
            }
        }
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        columnModel.getColumn(1).setCellRenderer(centerRenderer);
        columnModel.getColumn(2).setCellRenderer(centerRenderer);
        columnModel.getColumn(6).setCellRenderer(centerRenderer);
        columnModel.getColumn(7).setCellRenderer(centerRenderer);
    }
    
    private void showComponents(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showComponents
        // TODO add your handling code here:
        initTable();
    }//GEN-LAST:event_showComponents

    private boolean isRangeComplete(ArrayList<Integer> list) {
        // Check if the list is empty
        if (list.isEmpty()) {
            throw new IllegalArgumentException("List cannot be empty");
        }

        // Find the minimum and maximum numbers in the list
        int min = Collections.min(list);
        int max = Collections.max(list);

        // Create a boolean array to keep track of which numbers are present
        boolean[] present = new boolean[max - min + 1];

        // Iterate over the numbers in the list and mark each number as present in the boolean array
        for (int i : list) {
            present[i - min] = true;
        }

        // Iterate over the boolean array and return false if any number is missing
        for (boolean p : present) {
            if (!p) {
                return false;
            }
        }

        // If all the numbers are present, return true
        return true;
    }
    
    private boolean validateSelection() {
        ArrayList<Integer> totalMonths = new ArrayList<>();
        for (int i = 0; i < payments.size(); i++) {
            Payment payment = payments.get(i);
            if (! payment.getPaymentStatus().equals("Paid")) {
                totalMonths.add(i + 1);
            }
        }
        Collections.sort(selectedMonths);
        ArrayList<Integer> actualSelections = new ArrayList<>();
        for (int i = 0; i < paymentTable.getRowCount(); i++) {
            if ((boolean) paymentTable.getValueAt(i, 0)) {
                actualSelections.add(i + 1);
            }
        }
        
        if (selectedMonths.isEmpty()) {
            return false;
        }
        if (!Objects.equals(selectedMonths.get(0), totalMonths.get(0))) {
            return false;
        }
        if (! selectedMonths.equals(actualSelections)) {
            return false;
        }
        if (selectedMonths.size() > totalMonths.size()) {
            return false;
        }
        // TODO: change to accomodate overdue extra charge
        if (selectedAmt < (selectedMonths.size() * payments.get(0).getAmount())) {
            return false;
        }
        if (selectedAmt > (selectedMonths.size() * payments.get(0).getAmount())) {
            return false;
        }
        return isRangeComplete(selectedMonths);
    }
    
    // TODO: make this more efficient
    private void updatePaymentFile(String paymentMethod) {
        ArrayList<Payment> currentPayments = PaymentHandling.getCurrentStudentPayments(HostelST.getCurrentUser());
        for (int i = 0; i < currentPayments.size(); i++) {
            Payment payment = currentPayments.get(i);
            if (payment.getPaymentStatus().equals("Paid")) {
                continue;
            }
            for (int month : selectedMonths) {
                if (i + 1 == month) {
                    payment.setPaymentStatus("Paid");
                    payment.setMethod(paymentMethod);
                    payment.setDate(LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
                    PaymentHandling.updatePayment(payment);
                    break;
                }
            }
        }
    }
    
    private void proceedToPayment() {
        JTextField textField = new JTextField();

        JOptionPane optionPane = new JOptionPane(textField, JOptionPane.PLAIN_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION);
        optionPane.createDialog(null, "Enter your payment method:").setVisible(true);

        int option = (Integer) optionPane.getValue();

        if (option == JOptionPane.OK_OPTION) {
            String paymentMethodInput = textField.getText();

            Student currentUser = HostelST.getCurrentUser();
            Application currentUserApplication = HostelST.getCurrentUserApplication();
            Room currentUserRoom = HostelST.getCurrentUserRoom();

            DateTimeFormatter getFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd?HH:mm");
            DateTimeFormatter setFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm a");
            LocalDateTime dateStarted = LocalDateTime.parse(currentUserApplication.getStartDate(), getFormatter);
            LocalDateTime dateEnded = LocalDateTime.parse(currentUserApplication.getEndDate(), getFormatter);
            String dateStartedString = dateStarted.format(setFormatter);
            String dateEndedString = dateEnded.format(setFormatter);

            LinkedHashMap<String, String> data = new LinkedHashMap<>();
            data.put("Customer Name", currentUser.getName().replace("_", " "));
            data.put("Check-In Date", dateStartedString);
            data.put("Check-Out Date", dateEndedString);
            data.put("Rental Period", rentalPeriodLabel.getText());
            data.put("Room Type", "Single (for now)");
            data.put("Room Number", currentUserRoom.getRoomID());
            data.put("Total Price", "RM" + selectedAmt);

            Runnable onClose = () -> {
                Login.getHostelFrame().dispose();
                HostelST hostelST = new HostelST();
                Login.setHostelFrame(hostelST);
            };
            
            ReceiptGUI gui = new ReceiptGUI(data, onClose);
            
            updatePaymentFile(paymentMethodInput.replace(" ", "_"));   
        }
    }
    
    private void payBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBtnActionPerformed
        // TODO add your handling code here:
        if (! validateSelection()) {
            PopUpWindow.showErrorMessage("Invalid selection. Please click the 'Reset' button if any values are invalid.", "Error");
        } else {
            proceedToPayment();
        }
    }//GEN-LAST:event_payBtnActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton payBtn;
    private javax.swing.JTable paymentTable;
    private javax.swing.JLabel rentMonthsLabel;
    private static javax.swing.JLabel rentalPeriodLabel;
    private javax.swing.JButton resetBtn;
    private javax.swing.JLabel selectedAmtLabel;
    // End of variables declaration//GEN-END:variables
}